---
description: 
globs: 
alwaysApply: true
---
# Project Structure

## Root Directory
- `[.cursor/rules/](mdc:.cursor/rules)`: Cursor AI rules (like this one).
- `[src/](mdc:src)`: Main application source code.
- `[node_modules/](mdc:node_modules)`: Project dependencies (managed by `bun`).
- `[.swagger/](mdc:.swagger)`: Likely contains OpenAPI/Swagger definitions and generation scripts (`generate:api` script).
- `[public/](mdc:public)`: Static assets.
- `[package.json](mdc:package.json)`: Project manifest, dependencies, scripts.
- `[bun.lockb](mdc:bun.lockb)`: Exact dependency versions.
- `[vite.config.ts](mdc:vite.config.ts)`: Vite configuration.
- `[tailwind.config.ts](mdc:tailwind.config.ts)`: Tailwind CSS configuration.
- `[tsconfig.json](mdc:tsconfig.json)` / `[tsconfig.*.json](mdc:tsconfig.*.json)`: TypeScript configurations.
- `[components.json](mdc:components.json)`: Shadcn UI configuration.
- `[.eslintrc.cjs](mdc:.eslintrc.cjs)`: ESLint configuration.
- `[.prettierrc](mdc:.prettierrc)`: Prettier configuration.

## `src` Directory Breakdown
- `[src/main.tsx](mdc:src/main.tsx)`: Application root entry point. Renders `App`.
- `[src/App.tsx](mdc:src/App.tsx)`: Main application component. Sets up routing using `react-router-dom` and likely includes global context providers.
- `[src/index.css](mdc:src/index.css)`: Global CSS styles.

### Core Modules
- `[src/components/](mdc:src/components)`: Reusable UI components across the application. Likely contains components generated by Shadcn UI.
- `[src/contexts/](mdc:src/contexts)`: React Context providers for global state management:
    - `[src/contexts/AuthContext/](mdc:src/contexts/AuthContext)`: Handles authentication state, JWT decoding, login/logout actions.
    - `[src/contexts/MusicAtlasContext/](mdc:src/contexts/MusicAtlasContext)`: Manages the API client instance and potentially related state/query client setup.
- `[src/hooks/](mdc:src/hooks)`: Reusable custom React hooks:
    - `[src/hooks/data/](mdc:src/hooks/data)`: Hooks specifically for data fetching (likely using `@tanstack/react-query` and the `MusicAtlasContext`).
    - Other utility hooks (e.g., `useNow`).
- `[src/layouts/](mdc:src/layouts)`: Components defining the overall structure of different types of pages (e.g., dashboard layout, auth layout).
- `[src/constants/](mdc:src/constants)`: Application-wide constant values (e.g., route paths, enum-like objects, environment variable access).
- `[src/util/](mdc:src/util)`: General utility functions not specific to React or any feature.

### Feature Modules
- `[src/features/](mdc:src/features)`: Code organized by application feature or user role. Each subdirectory typically contains components, pages, routes, specific hooks, and logic related to that feature.
    - `[src/features/authentication/](mdc:src/features/authentication)`: Login, registration pages and related logic.
    - `[src/features/admin/](mdc:src/features/admin)`: Components and pages for administrative users.
    - `[src/features/teacher/](mdc:src/features/teacher)`: Components and pages for users with the 'teacher' role.
    - `[src/features/student/](mdc:src/features/student)`: Components and pages for users with the 'student' role.
    - `[src/features/legal/](mdc:src/features/legal)`: Pages like Terms of Service, Privacy Policy.
    - *Routing for features is often defined within these directories and aggregated in `[src/App.tsx](mdc:src/App.tsx)`.*
